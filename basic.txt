선택자의 종류
1.태그 선택자
ex) 
h1{
  color:red;
}
ex) 
h1,h2 
h1, h2태그 둘 다

2.id 선택자
ex)
#select{
  font-size:50px;
}

3. 클래스 선택자
ex)
.active{
  color:blue;
}
ex) 
h1.small
클래스 이름이 small인 h1 태그

4. 조상 자손 선택자
ex)
ul li{
  color:red;
}

5. 부모 자식 선택자
ex)
#lecture > li{
    border:1px solid red;
}

6. 가상 클래스 선택자

:link : 방문한 적이 없는 링크
:visited : 방문한 적이 있는 링크
:hover : 링크에 마우스를 올려 놨을 때
:active : 링크에 마우스를 클릭했을 때 
위의 선택자는 순서대로 지정해야 오류가 없다. 

ex)
a:active{
  color:green;
}

:first-child
ex) div p:first-child
div의 자손인 p중에 첫번째 p

:last-child
ex) div p:last-child
div의 자손인 p중에 마지막 p

:nth-child(A)
A번째 자식.
ex)div:nth-child(3)
div 자식중에 3번째 자식.

*
모든 태그를 가리킴.
ex) h1 *
h1밑에 있는 모든 태그들

A + B
A와 B가 같은 부모를 가지고 있는 형제관계일 때
A의 바로 오른쪽에 있는 1개의 B 태그만

A ~ B
A와 B가 같은 부모를 가지고 있는 형제관계일 때 
A바로 오른쪽에 있는 연속되어 있는 B 태그들만

< font-size >
1. rem
html 태그에 적용된 font-size의 영향을 받는다. html 태그의 폰트 크기에 따라서 상대적으로 크기가 결정되기 때문에 이해하기 쉽고 바람직한 단위이다.
ex) font-size:1rem;

2. px
모니터 상의 화소 하나의 크기에 대응되는 단위. 고정된 값. 
ex) font-size:16px;

3. em
부모 태그의 영향을 받는 상대적인 크기. 부모의 크기에 영향을 받기 때문에 파악하기가 어렵다.

< color >
ex) color: red;
ex) color: #ff0011;
ex) color: rgb(255,255,254);

< text-align >
정렬

왼쪽 ex) text-align: left;
가운데 ex) text-align: center;
오른쪽 ex) text-align: right;
양쪽 ex) text-align: justify;

< font-weight >
폰트의 두께 ex) font-weight:bold;

< line-height >
행 사이의 간격 
요소 폰트 크기의 배수. 기본값이 1.2
ex) line-height:1.2;

< 상속 >
부모 엘리먼트의 속성을 자식 엘리먼트가 물려받는 것.
ex) color

< 캐스케이딩 >
하나의 엘리먼트에 대해서 다양한 효과가 영향력을 행사하려고 할 때 우선순위를 어떻게 설정하는가.
inline(style 속성) > id > class > tag
저자 > 사용자 > 웹브라우저

제일 높은 것 : css 옆에 !important 설정. ex) color:red !important;

< inline-level vs block-level >
block : 화면 전체를 사용하는 태그  
inline : 화면의 일부를 차지하는 태그

display 속성으로 서로 바꿀 수 있다.
ex) h1{display:inline;}

< box-model >
block-level 요소에서
border : 테두리 ex) border:1px solid black;
padding : 여백 ex) padding:5px;
margin : 가장자리 ex) margin:3px;
width : 너비 ex) width:30px;
height: 높이 ex) height:30px;

※inline 요소에는 width, heigth 값은 무시된다.

< box-sizing >
width, height의 기준.
content-box : content 영역만을 나타냄. ex) box-sizing:content-box; (기본값)
border-box : border 까지의 영역을 나타냄. ex) box-sizing:border-box; 

< margin-collapse >
1. 위아래의 margin 중 더 큰 값의 margin이 적용이 된다.
2. 부모 태그가 시각적으로 아무런 효과가 없는 투명한 상태가 되면 자식 태그와 부모 태그의 마진 값이 합쳐진다. => 부모 엘리먼트의 마진값과 자식 엘리먼트의 마진 값 중에 큰 값이 자식 엘리먼트의 위치, 마진값이 된다.

< position >
1. static : offset 값을 무시하며, 원래 위치해야 할 위치에 고정. ( 기본값 )

2. relative : offset이 적용됨.
ex) 
position : relative;
left : 100px; // 왼쪽으로부터 100px 떨어뜨려라.
top : 50px;

3. absolute : absolute 설정 후 오프셋 설정을 안하면 자기가 있어야할 위치에 있지만 부모 자식 관계가 끊기기 때문에, 부모의 영역밖으로 표현되게 되고, 영역의 크기도 컨텐츠 크기만 남아있게 된다. 따라서 width, height를 설정해줘야 한다. 오프셋 설정을 한다면, position:static이 아닌 가장 가까운 부모를 기준으로 오프셋이 적용된다.
ex)
position : absolute;
left : 0;
right : 0;

4. fixed : 스크롤 바와 상관없이 항상 고정된 위치에 배치. fixed 설정 후 오프셋 설정을 안하면 자기가 있어야할 위치에 있지만 부모 자식 관계가 끊기기 때문에, 부모의 영역밖으로 표현되게 되고, 영역의 크기도 컨텐츠 크기만 남아있게 된다. 따라서 width, height를 설정해줘야 한다.

< flex >
container에 넣을 수 있는 속성 : display, flex-direction, flex-wrap, flex-flow, justify-content, align-items, align-content
item에 넣을 수 있는 속성 : order, flex-grow, flex-shrink, flex-basis, flex, align-self

[ container ]
display:flex; 기본적으로 flex를 사용하려면 반드시 container에 설정.
flex-direction: 정렬방법. row(기본값), row_reverse(반대로), column(세로로), column_reverse(세로로)
flex-wrap : no-wrap(기본값), wrap(아이템들의 크기가 컨테이너보다 커지면 줄바꿈이 된다.)
align-items : stretch(꽉 채우게끔 늘어남), flex-start(가로로 배치될 경우 위쪽에 붙음), flex-end(아래쪽에 붙음)
(생활코딩 강의 참고)
justify-content : ''


[ item ]
flex-basis: 200px; flex 방향에 해당하는 방향으로 너비 지정.
flex-grow:0(기본값), 1(컨테이너에 꽉 맞게끔 item들이 공평하게 늘어난다. 특정 아이템만 더 늘이거나 줄이려면, 해당 아이템만 flex-grow값을 늘려주면 된다. flex-basis 값이 존재해야 함.
비율 설정 기준 : 해당 아이템의 grow값 / 전체 아이템들의 grow값의 합
flex-shrink: 0(화면의 크기를 줄여도 해당 아이템의 너비는 줄이지 않는다 ), 1(기본값 - 화면의 크기를 줄이면 비율에 맞게 줄어든다). flex-basis 값이 존재해야 함.
(생활코딩 강의 참고)

[ media-query ]

@media (max-width:600px){
  body{
    background-color:red;
  } 
}
@media (max-width:500px){
  body{
    background-color:blue;
  } 
}
@media (min-width:600px){
  body{
    background-color:orange;
  } 
}

media quiery는 우선순위가 낮으므로 캐스케이딩 상에서 밀리지 않도록 다른 css 보다 맨 밑에 사용하는게 좋음. 동일한 조건 상에서는 뒤에나오는 것이 우선순위가 높다.
미디어 쿼리 여러개의 조건을 모두 만족할 때도 맨 아래에 있는 것이 적용되므로, 위의 예처럼 적절히 캐스케이딩 문제가 발생하지 않게 순서를 잘 배치해야 한다.
